장점
1. 만들기 힘든 객체를 순차적으로 만들게(강제) 할 수 있다. (생성자에 모두 넣으면 복잡해 질 수 있는데, 각각 올바른 위치에서 실행되도록 할 수 있다.)
2. 복잡한 객체를 만드는 복잡한 과정을 숨길 수 있다. (Director)
3. 동일한 프로세스를 통해서 각기 다른 객체를 생성 할 수 있다.
ex.TourDirector를 동일하게 사용하지만, Builder가 달라진다면 다른 인스턴스가 리턴 될 수 있다.
예를 들언 TourPlan 하위 클래스가 리턴 될 수도 있다. VIP용도 플랜, 외국인 플랜 등을 만들 수 있다.
4. 불완전한 객체를 사용하지 못하게끔 하는 안전장치가 있다.
ex. getPlan에서 온전한 객체인지 validate해 볼 수 있다. 그래서 getPlan전에는 plan으로 사용하지 못하게한다.

단점
1. TourPlan만들때 반드시 Builder나 Director를 만들어야한다.
2. 기존에 비해 구조가 복잡해진다.